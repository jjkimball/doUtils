## Exercise cloud init of droplet

## Uses: from doUtils: distroImages makeUserData makeDroplet isUp
## SshConn waitUntilCloudInitDone AllDroplets myDroplets

## Note that this test destroys all droplets at the end.

## Steps:
##   source SETUP
##   python
##     import doctest
##     doctest.testfile("exerciseDoUtilsAndSshConn.doctest", verbose=True)

>>> import time, doUtils

# We'll need the id of an image:
>>> ubuntu16Images = [img for img in doUtils.distroImages() if img[1] == 'Ubuntu' and img[2].startswith('16.04')]
>>> iId = ubuntu16Images[0][0]

# Make user data specifying a custom repository and a package to
# install from it:
>>> uData, uKeys = doUtils.makeUserData(customRepos=['ppa:kelleyk/emacs'], installPkgs=['emacs25'])

# Make the droplet VPS:
>>> dParms = doUtils.makeDroplet(iId, sudoUserKeys=uKeys, userData=uData)
>>> doUtils.isUp(dParms['ip address'], nTries=5)
True

# Now we need to wait until cloud init has completed.
>>> time.sleep(15)

# Make an ssh connection to the droplet, for checking:
>>> sConn = doUtils.SshConn(dParms['ip address'], 'adminutil', keyFname=dParms['pemFilePathname'])

# Wait until cloud init is done (hopefully):
>>> isDone = doUtils.waitUntilCloudInitDone(sConn)
>>> isDone['done'] == True
True

# See if emacs25 got installed:
>>> whIn, whOut, whErr = sConn.do('which emacs25')
>>> whOutLines = whOut.readlines()
>>> whOutLines and '/usr/bin/emacs25' in whOutLines[0]
True

# Cleanup.
# Shut all droplets down:
>>> doUtils.shutdownAllDroplets()    # doctest: +ELLIPSIS
[...

# And destroy them:
>>> doUtils.destroyAllDroplets()    # doctest: +ELLIPSIS
[...

# Check that they are gone.
>>> time.sleep(3)
>>> ds = doUtils.myDroplets()
>>> ds == []
True
